{"remainingRequest":"/home/runner/work/U2_Modelos_Desarrollo_Economico/U2_Modelos_Desarrollo_Economico/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Modelos_Desarrollo_Economico/U2_Modelos_Desarrollo_Economico/src/views/curso/Tema3.vue?vue&type=template&id=85f57c76&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Modelos_Desarrollo_Economico/U2_Modelos_Desarrollo_Economico/src/views/curso/Tema3.vue","mtime":1743652306245},{"path":"/home/runner/work/U2_Modelos_Desarrollo_Economico/U2_Modelos_Desarrollo_Economico/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Modelos_Desarrollo_Economico/U2_Modelos_Desarrollo_Economico/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Modelos_Desarrollo_Economico/U2_Modelos_Desarrollo_Economico/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Modelos_Desarrollo_Economico/U2_Modelos_Desarrollo_Economico/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Modelos_Desarrollo_Economico/U2_Modelos_Desarrollo_Economico/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}